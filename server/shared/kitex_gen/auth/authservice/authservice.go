// Code generated by Kitex v0.11.3. DO NOT EDIT.

package authservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	auth "github.com/rxdw-mall/server/shared/kitex_gen/auth"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"DeliverTokenByRPC": kitex.NewMethodInfo(
		deliverTokenByRPCHandler,
		newAuthServiceDeliverTokenByRPCArgs,
		newAuthServiceDeliverTokenByRPCResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"VerifyTokenByRpc": kitex.NewMethodInfo(
		verifyTokenByRpcHandler,
		newAuthServiceVerifyTokenByRpcArgs,
		newAuthServiceVerifyTokenByRpcResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"RenewTokenByRpc": kitex.NewMethodInfo(
		renewTokenByRpcHandler,
		newAuthServiceRenewTokenByRpcArgs,
		newAuthServiceRenewTokenByRpcResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	authServiceServiceInfo                = NewServiceInfo()
	authServiceServiceInfoForClient       = NewServiceInfoForClient()
	authServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return authServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return authServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return authServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "AuthService"
	handlerType := (*auth.AuthService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "auth",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.11.3",
		Extra:           extra,
	}
	return svcInfo
}

func deliverTokenByRPCHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*auth.AuthServiceDeliverTokenByRPCArgs)
	realResult := result.(*auth.AuthServiceDeliverTokenByRPCResult)
	success, err := handler.(auth.AuthService).DeliverTokenByRPC(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAuthServiceDeliverTokenByRPCArgs() interface{} {
	return auth.NewAuthServiceDeliverTokenByRPCArgs()
}

func newAuthServiceDeliverTokenByRPCResult() interface{} {
	return auth.NewAuthServiceDeliverTokenByRPCResult()
}

func verifyTokenByRpcHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*auth.AuthServiceVerifyTokenByRpcArgs)
	realResult := result.(*auth.AuthServiceVerifyTokenByRpcResult)
	success, err := handler.(auth.AuthService).VerifyTokenByRpc(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAuthServiceVerifyTokenByRpcArgs() interface{} {
	return auth.NewAuthServiceVerifyTokenByRpcArgs()
}

func newAuthServiceVerifyTokenByRpcResult() interface{} {
	return auth.NewAuthServiceVerifyTokenByRpcResult()
}

func renewTokenByRpcHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*auth.AuthServiceRenewTokenByRpcArgs)
	realResult := result.(*auth.AuthServiceRenewTokenByRpcResult)
	success, err := handler.(auth.AuthService).RenewTokenByRpc(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAuthServiceRenewTokenByRpcArgs() interface{} {
	return auth.NewAuthServiceRenewTokenByRpcArgs()
}

func newAuthServiceRenewTokenByRpcResult() interface{} {
	return auth.NewAuthServiceRenewTokenByRpcResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) DeliverTokenByRPC(ctx context.Context, req *auth.DeliverTokenReq) (r *auth.DeliveryResp, err error) {
	var _args auth.AuthServiceDeliverTokenByRPCArgs
	_args.Req = req
	var _result auth.AuthServiceDeliverTokenByRPCResult
	if err = p.c.Call(ctx, "DeliverTokenByRPC", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VerifyTokenByRpc(ctx context.Context, req *auth.VerifyTokenReq) (r *auth.VerifyResp, err error) {
	var _args auth.AuthServiceVerifyTokenByRpcArgs
	_args.Req = req
	var _result auth.AuthServiceVerifyTokenByRpcResult
	if err = p.c.Call(ctx, "VerifyTokenByRpc", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RenewTokenByRpc(ctx context.Context, req *auth.RenewTokenReq) (r *auth.RenewTokenResp, err error) {
	var _args auth.AuthServiceRenewTokenByRpcArgs
	_args.Req = req
	var _result auth.AuthServiceRenewTokenByRpcResult
	if err = p.c.Call(ctx, "RenewTokenByRpc", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
