// Code generated by thriftgo (0.3.17). DO NOT EDIT.

package errno

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type Err int64

const (
	Err_Success           Err = 0
	Err_NoRoute           Err = 1
	Err_NoMethod          Err = 2
	Err_BadRequest        Err = 10000
	Err_ParamsErr         Err = 10001
	Err_AuthorizeFail     Err = 10002
	Err_TooManyRequest    Err = 10003
	Err_ServiceErr        Err = 20000
	Err_RPCAuthSrvErr     Err = 30000
	Err_AuthSrvErr        Err = 30001
	Err_RPCCartSrvErr     Err = 40000
	Err_CartSrvErr        Err = 40001
	Err_RPCCheckoutSrvErr Err = 50000
	Err_CheckoutErr       Err = 50001
	Err_RPCOrderErr       Err = 60000
	Err_OrderErr          Err = 60001
	Err_RPCPaymentErr     Err = 70000
	Err_PaymentErr        Err = 70001
	Err_RPCProductErr     Err = 80000
	Err_ProductErr        Err = 80001
	Err_RPCUserErr        Err = 90000
	Err_UserErr           Err = 90001
)

func (p Err) String() string {
	switch p {
	case Err_Success:
		return "Success"
	case Err_NoRoute:
		return "NoRoute"
	case Err_NoMethod:
		return "NoMethod"
	case Err_BadRequest:
		return "BadRequest"
	case Err_ParamsErr:
		return "ParamsErr"
	case Err_AuthorizeFail:
		return "AuthorizeFail"
	case Err_TooManyRequest:
		return "TooManyRequest"
	case Err_ServiceErr:
		return "ServiceErr"
	case Err_RPCAuthSrvErr:
		return "RPCAuthSrvErr"
	case Err_AuthSrvErr:
		return "AuthSrvErr"
	case Err_RPCCartSrvErr:
		return "RPCCartSrvErr"
	case Err_CartSrvErr:
		return "CartSrvErr"
	case Err_RPCCheckoutSrvErr:
		return "RPCCheckoutSrvErr"
	case Err_CheckoutErr:
		return "CheckoutErr"
	case Err_RPCOrderErr:
		return "RPCOrderErr"
	case Err_OrderErr:
		return "OrderErr"
	case Err_RPCPaymentErr:
		return "RPCPaymentErr"
	case Err_PaymentErr:
		return "PaymentErr"
	case Err_RPCProductErr:
		return "RPCProductErr"
	case Err_ProductErr:
		return "ProductErr"
	case Err_RPCUserErr:
		return "RPCUserErr"
	case Err_UserErr:
		return "UserErr"
	}
	return "<UNSET>"
}

func ErrFromString(s string) (Err, error) {
	switch s {
	case "Success":
		return Err_Success, nil
	case "NoRoute":
		return Err_NoRoute, nil
	case "NoMethod":
		return Err_NoMethod, nil
	case "BadRequest":
		return Err_BadRequest, nil
	case "ParamsErr":
		return Err_ParamsErr, nil
	case "AuthorizeFail":
		return Err_AuthorizeFail, nil
	case "TooManyRequest":
		return Err_TooManyRequest, nil
	case "ServiceErr":
		return Err_ServiceErr, nil
	case "RPCAuthSrvErr":
		return Err_RPCAuthSrvErr, nil
	case "AuthSrvErr":
		return Err_AuthSrvErr, nil
	case "RPCCartSrvErr":
		return Err_RPCCartSrvErr, nil
	case "CartSrvErr":
		return Err_CartSrvErr, nil
	case "RPCCheckoutSrvErr":
		return Err_RPCCheckoutSrvErr, nil
	case "CheckoutErr":
		return Err_CheckoutErr, nil
	case "RPCOrderErr":
		return Err_RPCOrderErr, nil
	case "OrderErr":
		return Err_OrderErr, nil
	case "RPCPaymentErr":
		return Err_RPCPaymentErr, nil
	case "PaymentErr":
		return Err_PaymentErr, nil
	case "RPCProductErr":
		return Err_RPCProductErr, nil
	case "ProductErr":
		return Err_ProductErr, nil
	case "RPCUserErr":
		return Err_RPCUserErr, nil
	case "UserErr":
		return Err_UserErr, nil
	}
	return Err(0), fmt.Errorf("not a valid Err string")
}

func ErrPtr(v Err) *Err { return &v }
func (p *Err) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = Err(result.Int64)
	return
}

func (p *Err) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}
